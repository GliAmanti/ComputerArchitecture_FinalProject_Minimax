#!/usr/bin/env python3

# Cheeky .hex file creator, legible as a Xilinx .mem.

import sys
import numpy as np
import argparse
import functools
import warnings

if __name__=='__main__':
    parser = argparse.ArgumentParser(prog='bin2hex')
    parser.add_argument('infile', type=argparse.FileType('rb'))
    parser.add_argument('outfile', type=argparse.FileType('w'))
    parser.add_argument('--microcode', type=argparse.FileType('r'))
    parser.add_argument('--microcode-base', type=functools.partial(int, base=0), default=0x800)
    parser.add_argument('--size', type=functools.partial(int, base=0))
    args = parser.parse_args()

    # Start with input file
    ai = np.fromfile(args.infile, dtype=np.uint16)

    # Embed microcode
    if args.microcode:
        # microcode is read in from hex, not binary
        mc = np.loadtxt(args.microcode,
                        dtype=np.uint16,
                        converters={0: functools.partial(int, base=16)})

        # convert microcode offset from bytes to words
        offset = args.microcode_base//2

        # make room if necessary
        if len(ai) < offset+len(mc):
            ai.resize(offset + len(mc))

        # embed microcode
        ai[offset:offset+len(mc)] = mc

    # Pad with zeros to user-specified size
    if args.size:
        # convert size from bytes to words
        if args.size % 2:
            parser.error(f"Requested --size ({args.size}) was not a multiple of 2.")
        args.size //= 2

        # validate size
        if ai.size > args.size:
            parser.error(f"Refusing to truncate memory to specified --size ({args.size}).")
        #if args.size > 65536:
        #    warnings.warn("Large --size ({args.size}) argument: if this is intended for synthesis, are you sure?")

        # resize
        ai.resize(args.size)

    # Finally, write output
    args.outfile.writelines('%04X\n' % x for x in ai)
